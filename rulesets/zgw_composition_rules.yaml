rules:
  # Rule 1: Ensures all $refs are local (no http(s) URLs)
  # Examples:
  #     $ref: "#/components/schemas/User" (good)
  #     $ref: "https://example.com/schemas/User.yaml" (bad)
  #     oneOf: ["https://example.com/schemas/Pet.yaml"] (bad)
  #     allOf: ["#/components/schemas/Pet"] (good)
  #     items: "https://example.com/schemas/Item.yaml" (bad)
  #     not: "#/components/schemas/Invalid" (good)
  no-remote-refs:
    description: References should be local (no HTTP/HTTPS URLs allowed)
    message: "Remote $ref URLs are not allowed. Use local references only."
    severity: error
    given:
      - "$..$ref"
      - "$..oneOf[*]"
      - "$..allOf[*]"
      - "$..anyOf[*]"
      - "$..not"
      - "$..items"
    then:
      function: pattern
      functionOptions:
        notMatch: "^https?://"

  # Rule 2: Ensures that allOf contains at least two entries
  #
  # Valid examples:
  #   allOf:
  #     - $ref: "#/components/schemas/User"
  #     - type: object
  #       properties:
  #         name:
  #           type: string
  #
  #   allOf:
  #     - $ref: "#/components/schemas/User"
  #     - $ref: "#/components/schemas/Profile"
  #
  # Invalid example:
  #   allOf:
  #     - $ref: "#/components/schemas/User"    # single entry not allowed
  allof-at-least-two:
    description: Ensures allOf contains at least two schema entries
    message:
      allOf must contain at least two entries. Single-entry allOf should be flattened to its
      contained schema.
    severity: error
    given: $..*
    then:
      function: schema
      functionOptions:
        schema:
          if:
            type: object
            properties:
              allOf:
                type: array
                maxItems: 1
            required: [allOf]
          then: false

  # Rule 3: Ensures that allOf children are explicitly typed as objects
  # Example:
  #   allOf:
  #     - $ref: "#/components/schemas/BaseType"
  #     - type: object        # Must explicitly declare type: object
  #       properties:
  #         newProperty:
  #           type: string
  #
  # Invalid examples:
  #   allOf:
  #     - type: string       # Wrong - must be object
  #     - properties: {}     # Wrong - missing type: object
  #
  allof-children-must-be-objects:
    description: Children of allOf must be objects
    message: "allOf children must explicitly declare type: object"
    severity: error
    given: "$.components.schemas.*.allOf.*"
    then:
      - field: type
        function: truthy
      - field: type
        function: pattern
        functionOptions:
          match: "^object$"
